{"version":3,"sources":["components/Passes/PassForm.tsx","components/PassSelector/PassSelector.tsx","components/PassGenerator/PassGenerator.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["PassForm","props","className","type","name","Field","PASSPORT_SERIES","placeholder","onChange","PASSPORT_NUMBER","PassType","MEDICAL","DATE_OF_BIRTH","VEHICLE_NUMBER","TROIKA","pattern","STRELKA","WORK","EMPLOYER_TAX_NUMBER","maxLength","EMPLOYER_DESCRIPTION","HOSPITAL_DESCRIPTION","OTHER","PURPOSE","DESTINATION","PassSelector","useState","Object","keys","passes","active","setActive","entries","map","pass","key","classNames","onClick","id","fields","onSubmit","event","preventDefault","PassGenerator","setPassType","fieldsState","setFieldsState","values","target","value","state","field","join","formatSMS","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ef97f25.chunk.js","sourcesContent":["import React from \"react\";\nimport { PassFormProps, Field, PassType } from \"../PassGenerator\";\n\nexport function PassForm(props: PassFormProps) {\n  return (\n    <div className=\"Pass\">\n      <div className=\"Pass-field\">\n        <label className=\"Pass-label\">Паспорт</label>\n        <input\n          type=\"text\"\n          name={Field.PASSPORT_SERIES}\n          placeholder=\"Серия\"\n          onChange={props.onChange}\n        />\n        <input\n          type=\"text\"\n          name={Field.PASSPORT_NUMBER}\n          placeholder=\"Номер\"\n          onChange={props.onChange}\n        />\n      </div>\n      {props.type === PassType.MEDICAL ? (\n        <div className=\"Pass-field\">\n          <label className=\"Pass-label\">Дата рождения</label>\n          <input\n            type=\"text\"\n            name={Field.DATE_OF_BIRTH}\n            placeholder=\"12.03.2000\"\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      <div className=\"Pass-field\">\n        <label className=\"Pass-label\">Номер ТС</label>\n        <input\n          type=\"text\"\n          name={Field.VEHICLE_NUMBER}\n          placeholder=\"Р043МП177\"\n          onChange={props.onChange}\n        />\n      </div>\n      <div className=\"Pass-field\">\n        <label className=\"Pass-label\">Номер Тройки</label>\n        <input\n          type=\"text\"\n          name={Field.TROIKA}\n          placeholder=\"Номер Тройки\"\n          pattern=\"\\d*\"\n          onChange={props.onChange}\n        />\n      </div>\n      <div className=\"Pass-field\">\n        <label className=\"Pass-label\">Номер Стрелки</label>\n        <input\n          type=\"text\"\n          name={Field.STRELKA}\n          placeholder=\"Номер Стрелки\"\n          onChange={props.onChange}\n        />\n      </div>\n      {props.type === PassType.WORK ? (\n        <div className=\"Pass-field\">\n          <label className=\"Pass-label\">ИНН организации</label>\n          <input\n            type=\"text\"\n            name={Field.EMPLOYER_TAX_NUMBER}\n            placeholder=\"ИНН\"\n            maxLength={20}\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      {props.type === PassType.WORK ? (\n        <div className=\"Pass-field\">\n          <label className=\"Pass-label\">Краткое наименование организации</label>\n          <input\n            type=\"text\"\n            name={Field.EMPLOYER_DESCRIPTION}\n            placeholder=\"ООО Ромашка\"\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      {props.type === PassType.MEDICAL ? (\n        <div className=\"Pass-field\">\n          <label className=\"Pass-label\">\n            Краткое наименование медучреждения\n          </label>\n          <input\n            type=\"text\"\n            name={Field.HOSPITAL_DESCRIPTION}\n            placeholder=\"Название\"\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      {props.type === PassType.OTHER ? (\n        <div className=\"Pass-field\">\n          <label className=\"Pass-label\">Цель выхода</label>\n          <input\n            type=\"text\"\n            name={Field.PURPOSE}\n            placeholder=\"Цель выхода\"\n            maxLength={20}\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      {props.type === PassType.OTHER ? (\n        <div className=\"Pass-field\">\n          <label className=\"Pass-label\">Пункт назначения</label>\n          <input\n            type=\"text\"\n            name={Field.DESTINATION}\n            placeholder=\"Пункт назначения\"\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport classNames from \"classnames\";\nimport { passes, PassType } from \"../PassGenerator\";\n\nimport \"./PassSelector.css\";\n\ninterface PassSelectorProps {\n  onChange: (type: PassType) => void;\n}\n\nexport function PassSelector({ onChange }: PassSelectorProps) {\n  const [active, setActive] = useState(Object.keys(passes)[0]);\n\n  return (\n    <div className=\"PassSelector\">\n      <div className=\"PassSelector-label\">Тип пропуска</div>\n      <div className=\"PassSelector-tabs\">\n        {Object.entries(passes).map(([type, pass]) => {\n          return (\n            <div\n              key={type}\n              className={classNames(\"PassSelector-tab\", {\n                \"PassSelector-tab--active\": type === active,\n              })}\n              onClick={() => {\n                setActive(type);\n                onChange(type as PassType);\n              }}\n            >\n              {pass.name}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { PassForm } from \"../Passes\";\nimport { PassSelector } from \"../PassSelector\";\n\nimport \"./PassGenerator.css\";\n\nexport enum PassType {\n  WORK = \"work\",\n  MEDICAL = \"medical\",\n  OTHER = \"other\",\n}\n\nexport enum Field {\n  PASSPORT_SERIES = \"passport-series\",\n  PASSPORT_NUMBER = \"passport-number\",\n  DATE_OF_BIRTH = \"date-of-birth\",\n  VEHICLE_NUMBER = \"vehicle-number\",\n  TROIKA = \"troika\",\n  STRELKA = \"strelka\",\n  EMPLOYER_TAX_NUMBER = \"employer-tax-number\",\n  EMPLOYER_DESCRIPTION = \"employer-description\",\n  PURPOSE = \"purpose\",\n  HOSPITAL_DESCRIPTION = \"hospital-description\",\n  DESTINATION = \"destination\",\n  DESCRIPTION = \"description\",\n}\n\ninterface Pass {\n  id: number;\n  name: string;\n  fields: Field[];\n}\n\nexport const passes: Record<PassType, Pass> = {\n  [PassType.WORK]: {\n    id: 1,\n    name: \"Работа\",\n    fields: [\n      Field.PASSPORT_SERIES,\n      Field.PASSPORT_NUMBER,\n      Field.VEHICLE_NUMBER,\n      Field.TROIKA,\n      Field.STRELKA,\n      Field.EMPLOYER_TAX_NUMBER,\n      Field.EMPLOYER_DESCRIPTION,\n    ],\n  },\n  [PassType.MEDICAL]: {\n    id: 2,\n    name: \"Медицина\",\n    fields: [\n      Field.PASSPORT_SERIES,\n      Field.PASSPORT_NUMBER,\n      Field.DATE_OF_BIRTH,\n      Field.VEHICLE_NUMBER,\n      Field.TROIKA,\n      Field.STRELKA,\n      Field.HOSPITAL_DESCRIPTION,\n    ],\n  },\n  [PassType.OTHER]: {\n    id: 3,\n    name: \"Иные\",\n    fields: [\n      Field.PASSPORT_SERIES,\n      Field.PASSPORT_NUMBER,\n      Field.VEHICLE_NUMBER,\n      Field.TROIKA,\n      Field.STRELKA,\n      Field.PURPOSE,\n      Field.DESTINATION,\n    ],\n  },\n};\n\nfunction onSubmit(event: React.FormEvent<HTMLFormElement>) {\n  event.preventDefault();\n}\n\nexport function PassGenerator() {\n  const [type, setPassType] = useState<keyof typeof passes>(PassType.WORK);\n  const [fieldsState, setFieldsState] = useState<Record<string, any>>({});\n\n  return (\n    <div>\n      <PassSelector\n        onChange={(type) => {\n          setPassType(type);\n        }}\n      />\n      <form onSubmit={onSubmit}>\n        <PassForm\n          type={type}\n          values={fieldsState}\n          onChange={(event: any) => {\n            setFieldsState({\n              ...fieldsState,\n              [event.target.name]: event.target.value,\n            });\n          }}\n        />\n        <br />\n        <div className=\"PassGenerator-smsText\">\n          {formatSMS(fieldsState, type, passes[type].fields)}\n        </div>\n      </form>\n    </div>\n  );\n}\n\nfunction formatSMS(\n  state: Record<string, any>,\n  type: PassType,\n  fields: Field[]\n) {\n  return (\n    \"Пропуск*\" +\n    passes[type].id +\n    \"*1*\" +\n    fields.map((field) => state[field]).join(\"*\")\n  );\n}\n\nexport interface PassFormProps {\n  type: keyof typeof passes;\n  values: Record<string, any>;\n  onChange: React.ChangeEventHandler<HTMLSelectElement | HTMLInputElement>;\n}\n","import React from \"react\";\nimport { PassGenerator } from \"../PassGenerator/PassGenerator\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <div className=\"App-page\">\n        <PassGenerator />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}