{"version":3,"sources":["components/Pass/index.ts","components/PassForm/PassForm.tsx","components/PassSelector/PassSelector.tsx","components/PassGenerator/PassGenerator.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["PassType","PassField","passes","WORK","id","name","fields","PASSPORT_SERIES","PASSPORT_NUMBER","VEHICLE_NUMBER","TROIKA","STRELKA","EMPLOYER_TAX_NUMBER","EMPLOYER_DESCRIPTION","MEDICAL","DATE_OF_BIRTH","HOSPITAL_DESCRIPTION","OTHER","PURPOSE","DESTINATION","PassForm","props","className","type","placeholder","size","onChange","pattern","maxLength","PassSelector","useState","Object","keys","active","setActive","entries","map","pass","key","classNames","onClick","Clipboard","target","document","getElementById","handleCopyClick","window","ym","PassGenerator","setPassType","fieldsState","setFieldsState","values","event","value","state","field","join","formatSMS","href","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bd03a4ee.chunk.js","sourcesContent":["export enum PassType {\n  WORK = \"work\",\n  MEDICAL = \"medical\",\n  OTHER = \"other\",\n}\n\nexport enum PassField {\n  PASSPORT_SERIES = \"passport-series\",\n  PASSPORT_NUMBER = \"passport-number\",\n  DATE_OF_BIRTH = \"date-of-birth\",\n  VEHICLE_NUMBER = \"vehicle-number\",\n  TROIKA = \"troika\",\n  STRELKA = \"strelka\",\n  EMPLOYER_TAX_NUMBER = \"employer-tax-number\",\n  EMPLOYER_DESCRIPTION = \"employer-description\",\n  PURPOSE = \"purpose\",\n  HOSPITAL_DESCRIPTION = \"hospital-description\",\n  DESTINATION = \"destination\",\n  DESCRIPTION = \"description\",\n}\n\ninterface Pass {\n  id: number;\n  name: string;\n  fields: PassField[];\n}\n\nexport const passes: Record<PassType, Pass> = {\n  [PassType.WORK]: {\n    id: 1,\n    name: \"Работа\",\n    fields: [\n      PassField.PASSPORT_SERIES,\n      PassField.PASSPORT_NUMBER,\n      PassField.VEHICLE_NUMBER,\n      PassField.TROIKA,\n      PassField.STRELKA,\n      PassField.EMPLOYER_TAX_NUMBER,\n      PassField.EMPLOYER_DESCRIPTION,\n    ],\n  },\n  [PassType.MEDICAL]: {\n    id: 2,\n    name: \"Медицина\",\n    fields: [\n      PassField.PASSPORT_SERIES,\n      PassField.PASSPORT_NUMBER,\n      PassField.DATE_OF_BIRTH,\n      PassField.VEHICLE_NUMBER,\n      PassField.TROIKA,\n      PassField.STRELKA,\n      PassField.HOSPITAL_DESCRIPTION,\n    ],\n  },\n  [PassType.OTHER]: {\n    id: 3,\n    name: \"Иные цели\",\n    fields: [\n      PassField.PASSPORT_SERIES,\n      PassField.PASSPORT_NUMBER,\n      PassField.VEHICLE_NUMBER,\n      PassField.TROIKA,\n      PassField.STRELKA,\n      PassField.PURPOSE,\n      PassField.DESTINATION,\n    ],\n  },\n};\n","import React from \"react\";\nimport { PassType, PassField } from \"../Pass\";\n\nimport \"./PassForm.css\";\n\nexport interface PassFormProps {\n  type: PassType;\n  values: Record<string, any>;\n  onChange: React.ChangeEventHandler<HTMLSelectElement | HTMLInputElement>;\n}\n\nexport function PassForm(props: PassFormProps) {\n  return (\n    <div className=\"PassForm\">\n      <div className=\"PassForm-field PassForm-field--passport\">\n        <label className=\"PassForm-label\">Паспорт РФ</label>\n        <div className=\"PassForm-field PassForm-fieldBlock\">\n          <input\n            className=\"PassForm-input PassForm-input--inline\"\n            type=\"text\"\n            name={PassField.PASSPORT_SERIES}\n            placeholder=\"Серия\"\n            size={4}\n            onChange={props.onChange}\n          />\n          <input\n            className=\"PassForm-input PassForm-input--inline\"\n            type=\"text\"\n            name={PassField.PASSPORT_NUMBER}\n            placeholder=\"Номер\"\n            size={6}\n            onChange={props.onChange}\n          />\n        </div>\n      </div>\n      {props.type === PassType.MEDICAL ? (\n        <div className=\"PassForm-field\">\n          <label className=\"PassForm-label\">Дата рождения</label>\n          <input\n            className=\"PassForm-input\"\n            type=\"text\"\n            name={PassField.DATE_OF_BIRTH}\n            placeholder=\"ДД.ММ.ГГГГ\"\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      <div className=\"PassForm-field\">\n        <label className=\"PassForm-label\">Номер транспортного средства</label>\n        <input\n          className=\"PassForm-input\"\n          type=\"text\"\n          name={PassField.VEHICLE_NUMBER}\n          placeholder=\"Р043МП177 или 0505АА77\"\n          onChange={props.onChange}\n        />\n      </div>\n      <div className=\"PassForm-field\">\n        <label className=\"PassForm-label\">Номер Тройки</label>\n        <input\n          className=\"PassForm-input\"\n          type=\"text\"\n          name={PassField.TROIKA}\n          placeholder=\"12345678901\"\n          pattern=\"\\d*\"\n          onChange={props.onChange}\n        />\n      </div>\n      <div className=\"PassForm-field\">\n        <label className=\"PassForm-label\">Номер Стрелки</label>\n        <input\n          className=\"PassForm-input\"\n          type=\"text\"\n          name={PassField.STRELKA}\n          placeholder=\"12345678901\"\n          onChange={props.onChange}\n        />\n      </div>\n      {props.type === PassType.WORK ? (\n        <div className=\"PassForm-field\">\n          <label className=\"PassForm-label\">ИНН организации</label>\n          <input\n            className=\"PassForm-input\"\n            type=\"text\"\n            name={PassField.EMPLOYER_TAX_NUMBER}\n            placeholder=\"ИНН\"\n            maxLength={20}\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      {props.type === PassType.WORK ? (\n        <div className=\"PassForm-field\">\n          <label className=\"PassForm-label\">\n            Краткое наименование организации\n          </label>\n          <input\n            className=\"PassForm-input\"\n            type=\"text\"\n            name={PassField.EMPLOYER_DESCRIPTION}\n            placeholder=\"ООО Ромашка\"\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      {props.type === PassType.MEDICAL ? (\n        <div className=\"PassForm-field\">\n          <label className=\"PassForm-label\">\n            Краткое наименование медучреждения\n          </label>\n          <input\n            className=\"PassForm-input\"\n            type=\"text\"\n            name={PassField.HOSPITAL_DESCRIPTION}\n            placeholder=\"ГКБ Боткина\"\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      {props.type === PassType.OTHER ? (\n        <div className=\"PassForm-field\">\n          <label className=\"PassForm-label\">Цель выхода</label>\n          <input\n            className=\"PassForm-input\"\n            type=\"text\"\n            name={PassField.PURPOSE}\n            placeholder=\"на дачу\"\n            maxLength={20}\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n      {props.type === PassType.OTHER ? (\n        <div className=\"PassForm-field\">\n          <label className=\"PassForm-label\">Адрес назначения</label>\n          <input\n            className=\"PassForm-input\"\n            type=\"text\"\n            name={PassField.DESTINATION}\n            placeholder=\"Опалиха Пришвина 11\"\n            onChange={props.onChange}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport classNames from \"classnames\";\nimport { passes, PassType } from \"../Pass\";\n\nimport \"./PassSelector.css\";\n\ninterface PassSelectorProps {\n  onChange: (type: PassType) => void;\n}\n\nexport function PassSelector({ onChange }: PassSelectorProps) {\n  const [active, setActive] = useState(Object.keys(passes)[0]);\n\n  return (\n    <div className=\"PassSelector\">\n      <div className=\"PassSelector-label\">Тип пропуска</div>\n      <div className=\"PassSelector-tabs\">\n        {Object.entries(passes).map(([type, pass]) => {\n          return (\n            <div\n              key={type}\n              className={classNames(\"PassSelector-tab\", {\n                \"PassSelector-tab--active\": type === active,\n              })}\n              onClick={() => {\n                setActive(type);\n                onChange(type as PassType);\n              }}\n            >\n              {pass.name}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Clipboard from \"clipboard\";\nimport { PassType, PassField, passes } from \"../Pass\";\nimport { PassForm } from \"../PassForm\";\nimport { PassSelector } from \"../PassSelector\";\n\nimport \"./PassGenerator.css\";\n\nconst clipboard = new Clipboard(\".PassGenerator-copy\", {\n  target: () => document.getElementById(\"sms-text\")!,\n});\n\nfunction handleCopyClick() {\n  window.ym(61990129, \"reachGoal\", \"smsCopied\");\n}\n\nexport function PassGenerator() {\n  const [type, setPassType] = useState<PassType>(PassType.WORK);\n  const [fieldsState, setFieldsState] = useState<Record<string, any>>({});\n\n  return (\n    <div className=\"PassGenerator\">\n      <div className=\"PassGenerator-description\">\n        Cоставить SMS для получения пропуска через 7377. Власти Москвы сообщили,\n        что отклоняют 9 из 10 заявок из-за некорректного текста SMS.\n        <br />\n        Страница работает офлайн, SMS формируется прямо на телефоне, ваши личные\n        данные не собираются.\n      </div>\n      <PassSelector\n        onChange={(type) => {\n          setPassType(type);\n        }}\n      />\n      <PassForm\n        type={type}\n        values={fieldsState}\n        onChange={(event: any) => {\n          setFieldsState({\n            ...fieldsState,\n            [event.target.name]: event.target.value,\n          });\n        }}\n      />\n      <div className=\"PassGenerator-smsText\" id=\"sms-text\">\n        {formatSMS(fieldsState, type, passes[type].fields)}\n      </div>\n      <button className=\"PassGenerator-copy\" onClick={handleCopyClick}>\n        Скопировать\n      </button>\n      <div className=\"PassGenerator-smsNumber\">\n        <label>Москва: СМС на 7377</label>\n        <br />\n        <label className=\"PassGenerator-projectLink\">\n          <a href=\"https://github.com/vtambourine/smstogo\" target=\"_blank\">\n            Проект с открытым кодом\n          </a>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nfunction formatSMS(\n  state: Record<string, any>,\n  type: PassType,\n  fields: PassField[]\n) {\n  return (\n    \"Пропуск*\" +\n    passes[type].id +\n    \"*1*\" +\n    fields.map((field) => state[field]).join(\"*\")\n  );\n}\n","import React from \"react\";\nimport { PassGenerator } from \"../PassGenerator/PassGenerator\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-page\">\n        <PassGenerator />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}